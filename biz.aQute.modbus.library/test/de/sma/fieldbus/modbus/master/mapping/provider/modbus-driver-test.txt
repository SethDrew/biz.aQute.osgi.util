
r1 = 100

# Test No response 

no-response-trace = \
	0;\
		request  =  * * 00 00 00 06 00 03 ${W;${r1}} 00 08
			 
no-response-mapping = ${device-simple-mapping} 




# Test ack

ack-trace = \
	0;\
		request  =  *   * 00 00 00 06 00 03 ${W;${r1}} 00 08; \
		response = ^0  ^1 00 00 00 07 00 83 05  
			 
ack-mapping = ${device-simple-mapping} 


#
# Return package malformed
#

invalid-length-trace = = \
	0;\
		request  =  *   * 00 00 00 06 00 03 ${W;${r1}} 00 08; \
		response = ^0  ^1 00 00 00 07 00 03 10 00  
			 
invalid-length-mapping = ${device-simple-mapping} 



# Test slave illegal function request

illegal-function-trace = \
	0;\
		request  =  *   * 00 00 00 06 00 03 ${W;${r1}} 00 08; \
		response = ^0  ^1 00 00 00 07 00 83 01  
			 
illegal-function-mapping = ${device-simple-mapping} 


# Test failure on too many bytes in response packet

packet-wrong-response-code-trace = \
	0;\
		request  =  *   * 00 00 00 06 00 03 ${W;${r1}} 00 08; \
		response = ^0  ^1 00 00 00 07 00 04 10 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  
			 
packet-wrong-response-code-mapping = ${device-simple-mapping} 

# Test failure on too many bytes in response packet

packet-too-long-trace = \
	0;\
		request  =  *   * 00 00 00 06 00 03 ${W;${r1}} 00 08; \
		response = ^0  ^1 00 00 00 07 00 03 FF \
			00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  \
			00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  \
			00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  \
			00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  \
			00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  \
			00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  \
			00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  \
			00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  \
			00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  \
			00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  \
			00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  \
			00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  \
			00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  \
			00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  \
			00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  \
			00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
			 


packet-too-long-mapping = ${device-simple-mapping} 

# Simple example. This reads a 16 byte string

device-simple-trace = \
	0;\
		request  =  *   * 00 00 00 06 00 03 ${W;200} 00 08; \
		response = ^0  ^1 00 00 00 07 00 03 12 ${s;XYZ;16}


device-simple-mapping = { \
    "samplingGroups": [ \
        { \
            "samplingGroup": 1, \
            "groupblocks": [ \
                { \
                    "groupName": "string", \
                    "items": [ \
                        { \
                            "devClass": "PV", \
                            "modbusMappingType": { \
                                "modbusType": "string", \
                                "size": 8 \
                            },\
                            "modbusAccess": "R",\
                            "modbusReg": 200, \
                            "metaName": "string" \
                        }\
                    ]\
				}\
			]\
        }\
    ],\
    "endianess": "big"\
}


# Little Endian

little-endian-trace = \
	0;\
		request  =  *   * 00 00 00 06 00 03 ${W;${r1}} 00 06; \
		response = ^0  ^1 00 00 00 0F 00 03 0C  00 01 00 00  00 02 00 00 00 00 00 00 


little-endian-mapping = { \
    "samplingGroups": [ \
        { \
            "samplingGroup": 1, \
            "groupblocks": [ \
                { \
                    "groupName": "string", \
                    "items": [ \
                        { \
                            "devClass": "PV", \
                            "modbusMappingType": { \
                                "modbusType": "int32", \
                                "size": 2 \
                            },\
                            "modbusAccess": "R",\
                            "modbusReg": ${r1}, \
                            "metaName": "int32" \
                        },\
                        { \
                            "devClass": "PV", \
                            "modbusMappingType": { \
                                "modbusType": "int64", \
                                "size": 4 \
                            },\
                            "modbusAccess": "R",\
                            "modbusReg": 102, \
                            "metaName": "int64" \
                        }\
                    ]\
				}\
			]\
        }\
    ],\
    "endianess": "little"\
}

# Big Endian

big-endian-trace = \
	0;\
		request  =  *   * 00 00 00 06 00 03 ${W;${r1}} 00 06; \
		response = ^0  ^1 00 00 00 0F 00 03 0C  00 00 00 01  00 00 00 00 00 00 00 02 


big-endian-mapping = { \
    "samplingGroups": [ \
        { \
            "samplingGroup": 1, \
            "groupblocks": [ \
                { \
                    "groupName": "string", \
                    "items": [ \
                        { \
                            "devClass": "PV", \
                            "modbusMappingType": { \
                                "modbusType": "int32", \
                                "size": 2 \
                            },\
                            "modbusAccess": "R",\
                            "modbusReg": ${r1}, \
                            "metaName": "int32" \
                        },\
                        { \
                            "devClass": "PV", \
                            "modbusMappingType": { \
                                "modbusType": "int64", \
                                "size": 4 \
                            },\
                            "modbusAccess": "R",\
                            "modbusReg": 102, \
                            "metaName": "int64" \
                        }\
                    ]\
				}\
			]\
        }\
    ],\
    "endianess": "big"\
}